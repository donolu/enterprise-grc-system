name: CD - Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: grc-platform

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_ENV=production

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

    - name: Set up Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: latest

    - name: Deploy to Azure App Service (Staging)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_STAGING }}
        images: ${{ needs.build-and-push.outputs.image-tag }}

    - name: Run Database Migrations (Staging)
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Run migrations via Azure CLI
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_STAGING }} \
            --settings RUN_MIGRATIONS=true
          
          # Trigger a restart to apply migrations
          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_STAGING }}

    - name: Run Health Check (Staging)
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 60
        
        # Health check
        HEALTH_URL="https://${{ secrets.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net/health/"
        
        for i in {1..10}; do
          if curl -f "$HEALTH_URL"; then
            echo "‚úÖ Staging deployment successful!"
            exit 0
          else
            echo "‚è≥ Attempt $i failed, retrying in 30s..."
            sleep 30
          fi
        done
        
        echo "‚ùå Staging deployment health check failed"
        exit 1

    - name: Run Integration Tests (Staging)
      run: |
        # Run integration tests against staging environment
        echo "Running integration tests against staging..."
        # Add your integration test commands here
        # pytest tests/integration/ --base-url=https://${{ secrets.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main' && (github.event.inputs.environment == 'production' || github.event_name == 'push')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PRODUCTION }}

    - name: Create Backup (Production)
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Create database backup before deployment
          BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
          echo "Creating backup: $BACKUP_NAME"
          
          az sql db export \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
            --server ${{ secrets.AZURE_SQL_SERVER_PRODUCTION }} \
            --name ${{ secrets.AZURE_SQL_DATABASE_PRODUCTION }} \
            --admin-user ${{ secrets.AZURE_SQL_ADMIN_USER }} \
            --admin-password ${{ secrets.AZURE_SQL_ADMIN_PASSWORD }} \
            --storage-key ${{ secrets.AZURE_STORAGE_KEY }} \
            --storage-key-type StorageAccessKey \
            --storage-uri "https://${{ secrets.AZURE_STORAGE_ACCOUNT }}.blob.core.windows.net/backups/$BACKUP_NAME.bacpac"

    - name: Deploy to Azure App Service (Production)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }}
        images: ${{ needs.build-and-push.outputs.image-tag }}
        
    - name: Run Database Migrations (Production)
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Run migrations in production
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }} \
            --settings RUN_MIGRATIONS=true
          
          # Restart to apply migrations
          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }}

    - name: Run Health Check (Production)
      run: |
        echo "Waiting for production deployment to be ready..."
        sleep 90
        
        # Health check
        HEALTH_URL="https://${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }}.azurewebsites.net/health/"
        
        for i in {1..15}; do
          if curl -f "$HEALTH_URL"; then
            echo "‚úÖ Production deployment successful!"
            break
          else
            echo "‚è≥ Attempt $i failed, retrying in 30s..."
            sleep 30
            if [ $i -eq 15 ]; then
              echo "‚ùå Production deployment health check failed"
              exit 1
            fi
          fi
        done

    - name: Smoke Tests (Production)
      run: |
        # Run critical smoke tests
        echo "Running production smoke tests..."
        BASE_URL="https://${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }}.azurewebsites.net"
        
        # Test API endpoints
        curl -f "$BASE_URL/api/plans/" || exit 1
        curl -f "$BASE_URL/api/health/" || exit 1
        
        echo "‚úÖ Production smoke tests passed!"

    - name: Notify Deployment Success
      if: success()
      run: |
        echo "üöÄ Production deployment successful!"
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        # Add Slack/Teams notification here if needed

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && needs.deploy-production.result == 'failure'
    environment: production

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PRODUCTION }}

    - name: Rollback Production Deployment
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "üîÑ Rolling back production deployment..."
          
          # Get previous successful deployment
          PREVIOUS_IMAGE=$(az webapp config container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }} \
            --query "linuxFxVersion" -o tsv | sed 's/DOCKER|//')
          
          echo "Rolling back to: $PREVIOUS_IMAGE"
          
          # Note: This is a simplified rollback. In practice, you'd want to:
          # 1. Track previous successful deployments
          # 2. Restore database from backup if needed
          # 3. More sophisticated rollback logic
          
          echo "‚ùå Rollback completed. Manual intervention may be required."

  security-scan-image:
    name: Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()

    steps:
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'