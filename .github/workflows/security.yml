name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install safety
      run: pip install safety

    - name: Check Python dependencies for security vulnerabilities
      run: |
        echo "Checking Python dependencies for known vulnerabilities..."
        safety check --file requirements.txt --output json > safety-report.json || true
        
        # Also create human-readable report
        safety check --file requirements.txt || echo "Some vulnerabilities found - check JSON report"

    - name: Upload safety report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json

    - name: Node.js security audit
      if: always()
      working-directory: ./frontend
      run: |
        npm install
        npm audit --audit-level moderate

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install bandit
      run: pip install bandit[toml]

    - name: Run Bandit security linter
      run: |
        echo "Running Bandit security analysis..."
        bandit -r app/ \
          -f json \
          -o bandit-report.json \
          --severity-level medium \
          --confidence-level medium \
          || true
        
        # Also create human-readable report
        bandit -r app/ -f txt || echo "Security issues found - check JSON report"

    - name: Upload Bandit report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint Dockerfile linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-results.sarif

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install pip-licenses
      run: pip install pip-licenses

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Check licenses
      run: |
        echo "Generating license report..."
        pip-licenses --format json --output-file licenses-report.json
        pip-licenses --format markdown --output-file licenses-report.md
        
        # Check for restrictive licenses
        echo "Checking for restrictive licenses..."
        pip-licenses --format csv | grep -E "(GPL|AGPL|LGPL)" || echo "No restrictive licenses found"

    - name: Upload license reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses-report.json
          licenses-report.md

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,github_actions,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-results.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security, secrets-scan, dockerfile-security, sast-analysis]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" >> security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scans Performed" >> security-summary.md
        echo "- âœ… Dependency vulnerability check (Safety)" >> security-summary.md
        echo "- âœ… Code security analysis (Bandit)" >> security-summary.md
        echo "- âœ… Secrets detection (TruffleHog)" >> security-summary.md
        echo "- âœ… Dockerfile security (Hadolint)" >> security-summary.md
        echo "- âœ… Static analysis (CodeQL)" >> security-summary.md
        echo "- âœ… Infrastructure security (Checkov)" >> security-summary.md
        echo "- âœ… License compliance check" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Reports Generated" >> security-summary.md
        echo "Check the Actions artifacts for detailed reports:" >> security-summary.md
        echo "- \`safety-report.json\` - Python dependency vulnerabilities" >> security-summary.md
        echo "- \`bandit-report.json\` - Code security issues" >> security-summary.md
        echo "- \`licenses-report.json\` - License compliance" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Next Steps" >> security-summary.md
        echo "1. Review any HIGH or CRITICAL findings" >> security-summary.md
        echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
        echo "3. Address code security issues identified by Bandit" >> security-summary.md
        echo "4. Ensure no secrets are committed to the repository" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ”’ Security Scan Results\n\n${summary}`
          });